;; -*-lisp-*-
;;
;; Here is a sample .stumpwmrc file

(in-package :stumpwm)

;; change the prefix key to something else
;;(set-prefix-key (kbd "C-z"))
(set-prefix-key (kbd "M-Tab"))

;; prompt the user for an interactive command. The first arg is an
;; optional initial contents.
(defcommand colon1 (&optional (initial "")) (:rest)
  (let ((cmd (read-one-line (current-screen) ": " :initial-input initial)))

    (when cmd
      (eval-command cmd t))))

;; Read some doc
(define-key *root-map* (kbd "d") "exec gv")
;; Browse somewhere
(define-key *root-map* (kbd "b") "colon1 exec firefox http://www.")
;; Ssh somewhere
(define-key *root-map* (kbd "C-s") "colon1 exec xterm -e ssh ")
;; Lock screen
(define-key *root-map* (kbd "C-l") "exec xlock")

;; Web jump (works for Google and Imdb)
(defmacro make-web-jump (name prefix)
  `(defcommand ,(intern name) (search) ((:rest ,(concatenate 'string name " search: ")))
    (substitute #\+ #\Space search)
    (run-shell-command (concatenate 'string ,prefix search))))

(make-web-jump "google" "firefox http://www.google.fr/search?q=")
(make-web-jump "imdb" "firefox http://www.imdb.com/find?q=")

;; C-t M-s is a terrble binding, but you get the idea.
(define-key *root-map* (kbd "M-s") "google")
(define-key *root-map* (kbd "i") "imdb")

;; Message window font
(set-font "-xos4-terminus-medium-r-normal--14-140-72-72-c-80-iso8859-15")

;;; Define window placement policy...

;; Clear rules
(clear-window-placement-rules)

;; Last rule to match takes precedence!
;; TIP: if the argument to :title or :role begins with an ellipsis, a substring
;; match is performed.
;; TIP: if the :create flag is set then a missing group will be created and
;; restored from *data-dir*/create file.
;; TIP: if the :restore flag is set then group dump is restored even for an
;; existing group using *data-dir*/restore file.
(define-frame-preference "Default"
  ;; frame raise lock (lock AND raise == jumpto)
  (0 t nil :class "Konqueror" :role "...konqueror-mainwindow")
  (1 t nil :class "XTerm"))

(define-frame-preference "Ardour"
  (0 t   t   :instance "ardour_editor" :type :normal)
  (0 t   t   :title "Ardour - Session Control")
  (0 nil nil :class "XTerm")
  (1 t   nil :type :normal)
  (1 t   t   :instance "ardour_mixer")
  (2 t   t   :instance "jvmetro")
  (1 t   t   :instance "qjackctl")
  (3 t   t   :instance "qjackctl" :role "qjackctlMainForm"))

(define-frame-preference "Shareland"
  (0 t   nil :class "XTerm")
  (1 nil t   :class "aMule"))

;;(define-frame-preference "Emacs"
;;  (1 t t :restore "emacs-editing-dump" :title "...xdvi")
;;  (0 t t :create "emacs-dump" :class "Emacs"))


;; This is where things I define will go until I have a better feel for StumpWM.
;;  At that point, things will be moved to places that seem more appropriate.

;; open either an emacsclient or emacs, depending upon whether we are using my
;;  laptop or desktop
;;(define-key *root-map* (kbd "e") "exec emacsclient -c")
(define-key *root-map* (kbd "e") 
  (concat "exec emacs"
          (if (string-equal "7752.Arch.Matthew" (machine-instance))
              "client -c" ; if we are on is my desktop, run emacsclient
              nil)))      ; otherwise, run emacs

;; this works in the latest git version, and it behaves just like the emacs
;;  version of which-key
;;(which-key-mode)

;; allows us to connect to the wm using SLIME
(require :swank)
(echo (swank-loader:init))
(echo (swank:create-server :port 4004
                     :style swank:*communication-style*
                     :dont-close t))

;; adds the date to the modeline
;;(setq stumpwm:*mode-line-timeout* 1)
;;(setf stumpwm:*screen-mode-line-format* (list "[^B%n^b] %W" '(:eval (stumpwm:run-shell-command "date" t))))
;;(stumpwm:mode-line)

;; add the time to the modeline and display it (is there a better program for the time?)
(setq *mode-line-timeout* 1)
(setf *screen-mode-line-format* (list "[^B%n^b] %W" '(:eval (run-shell-command "date +%a_%F_%H:%M:%S" t))))
;;(setf *screen-mode-line-format* (list "[^B%n^b] %W" '(:eval (run-shell-command "date +%a_%F_%H:%M:%S" t)) '(:eval (run-shell-command "acpi" t))))
(mode-line)

;; switch groups with s-[N]
(stumpwm:define-key stumpwm:*top-map* (stumpwm:kbd "s-1") "gselect 1")
(stumpwm:define-key stumpwm:*top-map* (stumpwm:kbd "s-2") "gselect 2")
(stumpwm:define-key stumpwm:*top-map* (stumpwm:kbd "s-3") "gselect 3")
(stumpwm:define-key stumpwm:*top-map* (stumpwm:kbd "s-4") "gselect 4")
(stumpwm:define-key stumpwm:*top-map* (stumpwm:kbd "s-5") "gselect 5")
(stumpwm:define-key stumpwm:*top-map* (stumpwm:kbd "s-6") "gselect 6")
(stumpwm:define-key stumpwm:*top-map* (stumpwm:kbd "s-7") "gselect 7")
(stumpwm:define-key stumpwm:*top-map* (stumpwm:kbd "s-8") "gselect 8")
(stumpwm:define-key stumpwm:*top-map* (stumpwm:kbd "s-9") "gselect 9")
(stumpwm:define-key stumpwm:*top-map* (stumpwm:kbd "s-0") "gselect 0")

(stumpwm:define-key stumpwm:*top-map* (stumpwm:kbd "s-ESC") "gselect 1")

;; move focus with s-[direction]
(stumpwm:define-key stumpwm:*top-map* (stumpwm:kbd "s-Left") "move-focus left")
(stumpwm:define-key stumpwm:*top-map* (stumpwm:kbd "s-Right") "move-focus right")
(stumpwm:define-key stumpwm:*top-map* (stumpwm:kbd "s-Up") "move-focus up")
(stumpwm:define-key stumpwm:*top-map* (stumpwm:kbd "s-Down") "move-focus Down")
(stumpwm:define-key stumpwm:*top-map* (stumpwm:kbd "s-S-Left") "exchange-direction left")
(stumpwm:define-key stumpwm:*top-map* (stumpwm:kbd "s-S-Right") "exchange-direction right")
(stumpwm:define-key stumpwm:*top-map* (stumpwm:kbd "s-S-Up") "exchange-direction up")
(stumpwm:define-key stumpwm:*top-map* (stumpwm:kbd "s-S-Down") "exchange-direction Down")

(stumpwm:define-key stumpwm:*top-map* (stumpwm:kbd "s-SPC") "pull-hidden-next")
(stumpwm:define-key stumpwm:*top-map* (stumpwm:kbd "s-S-SPC") "pull-hidden-previous")
(stumpwm:define-key stumpwm:*top-map* (stumpwm:kbd "C-s-Right") "pull-hidden-next")
(stumpwm:define-key stumpwm:*top-map* (stumpwm:kbd "C-s-Left") "pull-hidden-previous")
(stumpwm:define-key stumpwm:*top-map* (stumpwm:kbd "M-s-Right") "pull-hidden-next")
(stumpwm:define-key stumpwm:*top-map* (stumpwm:kbd "M-s-Left") "pull-hidden-previous")

;; bindings for commonly used apps
(defvar *application-map* (make-sparse-keymap))
(define-key *root-map* (kbd "a") '*application-map*)
(define-key *application-map* (kbd "f") "exec firefox")
(define-key *application-map* (kbd "u") "exec urxvt")
(define-key *application-map* (kbd "c") "exec google-chrome-stable")
(define-key *application-map* (kbd "r") "exec rofi -show run")

;; sets the focus policy so that the focus follows the mouse
(setf *mouse-focus-policy* :sloppy)

;;(define-key *top-map* (kbd "XF86MonBrightnessUp") "exec brightup")
;;(define-key *top-map* (kbd "XF86MonBrightnessDown") "exec brightdown")
