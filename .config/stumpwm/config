;; -*-lisp-*-
;;
;; Here is a sample .stumpwmrc file

(in-package :stumpwm)
;;(setq *debug-level* 10)
;;(redirect-all-output "~/.stumpwm.d/debug-output.txt")

;; change the prefix key to something else
(set-prefix-key (kbd "M-Tab"))

;; prompt the user for an interactive command. The first arg is an
;; optional initial contents.
(defcommand colon1 (&optional (initial "")) (:rest)
  (let ((cmd (read-one-line (current-screen) ": " :initial-input initial)))

    (when cmd
      (eval-command cmd t))))

;; Browse somewhere
(define-key *root-map* (kbd "b") "colon1 exec firefox http://www.")
;; Lock screen
;;(define-key *root-map* (kbd "C-l") "exec xlock")

;; Web jump (works for Google and Imdb)
(defmacro make-web-jump (name prefix)
  `(defcommand ,(intern name) (search) ((:rest ,(concatenate 'string name " search: ")))
    (substitute #\+ #\Space search)
    (run-shell-command (concatenate 'string ,prefix search))))

;;(make-web-jump "google" "firefox http://www.google.fr/search?q=")
;;(define-key *root-map* (kbd "M-s") "google")
;;(make-web-jump "imdb" "firefox http://www.imdb.com/find?q=")
;;(define-key *root-map* (kbd "i") "imdb")


;; set the font
(ql:quickload "clx")
(ql:quickload "clx-truetype")
(load-module "ttf-fonts")

(defun try-setting-ttf-font
    (quoted-ttf-font &key fallback-font do-not-retry)
  "Try to set the font to the truetype font described by the quoted expression
    `quoted-ttf-font'. If the quoted expression results in a simple-error, the
    xft font cache is rebuilt and we try setting the font again. The font will
    be set to a non-ttf font described in the x-font-spec string `fallback-font'
    if it is non-nil and we fail to set the ttf-font."

  (handler-case
      (set-font (eval quoted-ttf-font))

    (simple-error ()
      (if (not do-not-retry)
          (progn
            (xft:cache-fonts)
            (try-setting-ttf-font quoted-ttf-font
                                  :fallback-font fallback-font
                                  :do-not-retry t))
          (progn
            (echo "Failed to apply truetype font.")
            (if fallback-font (set-font fallback-font))
            nil)))))

(try-setting-ttf-font
 (quote (make-instance 'xft:font
                       :family "Inconsolata"
                       :subfamily "Regular"
                       :size 12))
 :fallback-font (set-font
                 "-windows-dina-medium-r-normal--12-*-96-96-c-70-iso8859-1"))

;;; Define window placement policy...

;;(find "Noto" (clx-truetype:get-font-families) :test #'search)

;; Clear rules
(clear-window-placement-rules)

;; This is where things I define will go until I have a better feel for StumpWM.
;;  At that point, things will be moved to places that seem more appropriate.

(define-key *root-map* (kbd "e") "exec emacsclient -c")

;; this works in the latest git version, and it behaves just like the emacs
;;  version of which-key
;;(which-key-mode)

;; allows us to connect to the wm using SLIME
(ql:quickload "swank")
(require :swank)
(echo (swank-loader:init))
(echo (swank:create-server :port 4004
                     :style swank:*communication-style*
                     :dont-close t))

(setq *mode-line-timeout* 1)
(setq *mode-line-position* :bottom)
(setq *time-modeline-string* "%a %F %H:%M:%S")
(load-module "net")
(load-module "wifi")
(load-module "cpu")
(load-module "mem")
(load-module "disk")
(setq *screen-mode-line-format* '("[^B%n^b] %W ^> %c %M %B %D %l %I %d"))
;;(setq *screen-mode-line-format* '("[^B%n^b] %W ^> %c %N %B %l %I %d"))
;;(setq *screen-mode-line-format* '("[^B%n^b] %W ^> %B %l %I %d"))
;;(setq *screen-mode-line-format* '("[^B%n^b] %W ^> %B %d"))
(mode-line)

(defmacro define-implied-keys-for-map (map &rest things)
  (append
   (list (quote progn))
   (loop for x in things by #'cddr
      for y in (cdr things) by #'cddr
      collect (list (quote define-key) map (list (quote kbd) x) y))))

;; frame/window keybindings
(defvar *window-map* (make-sparse-keymap))
(define-key *root-map* (kbd "w") '*window-map*)
(define-key *window-map* (kbd "c") "remove-split")
(define-key *window-map* (kbd "v") "hsplit")
(define-key *window-map* (kbd "s") "vsplit")

;; For some reason, this will not work. Talk to the IRC channel for help with
;;  this.
(undefine-key *root-map* (kbd "C-k"))

(define-implied-keys-for-map stumpwm:*top-map*
    "s-!" "gmove 1"
    "s-@" "gmove 2"
    "s-#" "gmove 3"
    "s-$" "gmove 4"
    "s-%" "gmove 5"
    "s-^" "gmove 6"
    "s-&" "gmove 7"
    "s-*" "gmove 8"
    "s-(" "gmove 9"
    "s-)" "gmove 10")

;; switch groups with s-[N]
(define-implied-keys-for-map *top-map*
    "s-1" "gselect 1"
    "s-2" "gselect 2"
    "s-3" "gselect 3"
    "s-4" "gselect 4"
    "s-5" "gselect 5"
    "s-6" "gselect 6"
    "s-7" "gselect 7"
    "s-8" "gselect 8"
    "s-9" "gselect 9"
    "s-0" "gselect 0")

(define-key *top-map* (stumpwm:kbd "s-ESC") "gselect 1")

;; move focus with s-[direction]
(define-implied-keys-for-map *top-map*
    "s-Left"    "move-focus Left"
    "s-Right"   "move-focus Right"
    "s-Up"      "move-focus Up"
    "s-Down"    "move-focus Down"
    "s-S-Left"  "exchange-direction Left"
    "s-S-Right" "exchange-direction Right"
    "s-S-Up"    "exchange-direction Up"
    "s-S-Down"  "exchange-direction Down"
    
    "s-SPC"     "pull-hidden-next"
    "s-S-SPC"   "pull-hidden-previous"
    "C-s-Right" "pull-hidden-next"
    "C-s-Left"  "pull-hidden-previous"
    "M-s-Right" "pull-hidden-next"
    "M-s-Left"  "pull-hidden-previous")

(defcommand renumber-relative (n) ((:number "How many window numbers forward?: "))
  "Set the current window's number @var{n} places forward relative to it's
current position. Increment the window's number by @var{n}."
  (let ((desired-window-number
         (+ (window-number (current-window))
            n)))

    ;; Don't set the window number below 0, because negative indices are invalid
    (if (< desired-window-number 0)
        (renumber 0)

        (renumber desired-window-number))))

(define-implied-keys-for-map *top-map*
    "C-s-S-Left" "renumber-relative -1"
    "M-s-S-Left" "renumber-relative -1"
    "C-M-s-Left" "renumber-relative -1"
    "C-s-S-Right" "renumber-relative 1"
    "M-s-S-Right" "renumber-relative 1"
    "C-M-s-Right" "renumber-relative 1")

(defcommand open-mstdn nil nil (run-or-pull "open-mstdn-app" '(:class "Mstdn")))
(defcommand open-riot nil nil (run-or-pull "riot-desktop" '(:class "Riot")))
(defcommand open-spotify nil nil (run-or-pull "spotify" '(:class "Spotify")))

;; bindings for commonly used apps
(defvar *application-map* (make-sparse-keymap))

(define-key *root-map* (kbd "a") '*application-map*)
(define-implied-keys-for-map *application-map*
    "f" "exec firefox"
    "u" "exec urxvt"
    "c" "exec google-chrome-stable"
    "r" "open-riot"
    "s" "open-spotify"
    "S" "exec skypeforlinux"
    "p" "exec pavucontrol"
    "v" "exec vivaldi-stable"
    "m" "open-mstdn")
;;(define-key *application-map* (kbd "g") "exec gajim")

(defvar *games-map* (make-sparse-keymap))
(define-key *application-map* (kbd "g") '*games-map*)
(define-implied-keys-for-map *games-map*
    "k" "exec kega-fusion"
    "f" "exec firestorm"
    "t" "exec torchlight"
    "s" "exec steam")

;; sets the focus policy so that the focus follows the mouse
(setf *mouse-focus-policy* :sloppy)

(define-key *top-map* (kbd "XF86MonBrightnessUp") "exec brightup")
(define-key *top-map* (kbd "XF86MonBrightnessDown") "exec brightdown")

;; take a screenshot
(define-key *top-map* (kbd "Print") "exec gnome-screenshot")

;;; Now to undefine a bunch of default keybindings
(undefine-key *root-map* (kbd "C-c"))
(undefine-key *root-map* (kbd "c"))
(undefine-key *root-map* (kbd "C-e"))
(undefine-key *root-map* (kbd "C-m"))


(ql:quickload 'cl-colors)

(defun dim-hex-color (hex-color-to-dim ammount)
  (let* ((hsv-color-to-dim
         (cl-colors:as-hsv
          (cl-colors:parse-hex-rgb hex-color-to-dim :start 1)))
         (my-hue (cl-colors:hsv-hue hsv-color-to-dim))
         (my-saturation (cl-colors:hsv-saturation hsv-color-to-dim))
         (my-value (cl-colors:hsv-value hsv-color-to-dim)))

    (cl-colors:print-hex-rgb
     (cl-colors:hsv
      my-hue
      (if (> (* my-saturation 239) (- ammount 1))
          (- my-saturation (/ ammount 239))
          my-saturation)
      (if (> (* my-value 255) (- ammount 1))
          (- my-value (/ ammount 255))
          my-value)))))

;; apply a foreground and background color to various aspects of the UI
;;
;; Note: take what's here and create a function for nicely creating colored
;;  strings
(defun apply-foreground-background (foreground background)
  ;; Get the x-color objects here so that we don't have to get them repeatedly
  ;;  in a bunch of the steps below
  ;; TODO: What's the difference between "alloc-color" and "lookup-color", both
  ;;  for XLib and StumpWM?
  (let ((foreground-x-color
         (nth-value 2 (alloc-color (current-screen) foreground)))

        (background-x-color
         (nth-value 2 (alloc-color (current-screen) background))))

        (set-fg-color foreground-x-color)
        (set-bg-color background-x-color)
        (setq *mode-line-foreground-color* foreground-x-color)
        (setq *mode-line-background-color* background-x-color)
        (set-win-bg-color foreground-x-color)
        (set-focus-color foreground-x-color)
        (set-unfocus-color background-x-color))
  ;;(setq *bar-med-color* (concat "^(:fg \"" (dim-hex-color foreground 10) "\")"))
  ;;(setq *bar-hi-color* (concat "^(:fg \"" (dim-hex-color foreground 5) "\")"))
  ;;(setq *bar-crit-color* (concat "^(:fg \"" foreground "\")"))

  (setq *bar-med-color* (concat "^(:fg \"" foreground "\")"))
  (setq *bar-hi-color* (concat "^(:fg \"" foreground "\")"))
  (setq *bar-crit-color* (concat "^(:fg \"" foreground "\")"))
  (mode-line)
  (mode-line))

(ql:quickload 'inferior-shell)
(defun emacs-repl-send-string (string-to-send)
  (handler-case
      (string-trim "\\\""
                   (string-right-trim (string #\NewLine)
                                      (inferior-shell:run/s
                                       `(emacsclient --eval ,string-to-send))))

    (UIOP/RUN-PROGRAM:subprocess-error (spe)
      ;;(echo "Failed to connect to emacs-daemon. Is it started?")
      (cerror "Failed to connect to send ~s emacs-daemon. Is it running?" string-to-send))))
;;(car (split-string (inferior-shell:run/s `(emacsclient --eval ,string)) "\\\""))

(defun apply-emacs-colors ()
  (handler-case
  (apply-foreground-background
   (emacs-repl-send-string "(face-foreground 'default)")
   (emacs-repl-send-string "(face-background 'default)"))
    (simple-error (se) (echo "Failed to apply emacs colors."))))

(defun apply-emacs-font ()
  (let ((font-to-apply (emacs-repl-send-string
                        "(caar e454iel-current-font-pairs)"))
        (size-to-apply (emacs-repl-send-string
                         "(+ e454iel-font-scale (cdar e454iel-current-font-pairs))")))

    (handler-case
         (set-font (make-instance 'xft:font
                                  :family font-to-apply
                                  :subfamily "Regular"
                                  :size (- (parse-integer size-to-apply) 1)))

      (simple-error (se)
        (set-font (concat "-*-" font-to-apply "-medium-r-*--"
                          size-to-apply "-*-*-*-*-*-*-*"))))))

;;(apply-emacs-colors)

(load-module "battery-portable")

(load-module "swm-gaps")
(setq swm-gaps::*inner-gaps-size* 7
      swm-gaps::*outer-gaps-size* 0
      swm-gaps::*gaps-on* t)

;; look into (load-module "ttf-fonts"). This whole page is interesting:
;;  https://github.com/ivoarch/.dot-org-files/blob/master/stumpwm.org

;; this prevents weird thick borders from forming around the top and bottom of
;;  emacs
(setq *ignore-wm-inc-hints* t)
(setq *window-border-style* :THIN)


;; Now for some experimental root exposure testing sillyness

(defvar *e454-swm/desktop-canvas-points* '((0 0)))

(defun e454-swm/redraw-desktop-canvas-points (screen points-list)
  (let* ((root-xwindow (screen-root screen))
        (gcontext (xlib:create-gcontext
                   :drawable root-xwindow
                   :line-style :double-dash
                   :line-width 1
                   :foreground (xlib:screen-white-pixel
                                (screen-number screen)))))

    (loop for (first second) on points-list
       do (when second
            (progn

              ;;(format t "(~S ~S) -> (~S ~S) ~C" (first first) (second first) (first second) (second second) #\newline)
              (format t "~S -> ~S ~C" first second #\newline)
              (xlib:draw-line root-xwindow
                              gcontext
                              (first first) (second first)
                              (first second) (second second)))))))

(defun e454-swm/add-desktop-canvas-point (screen mouse-button x y)
  (push (list x y) *e454-swm/desktop-canvas-points*)
  (e454-swm/redraw-desktop-canvas-points screen *e454-swm/desktop-canvas-points*))

(add-hook *root-click-hook* 'e454-swm/add-desktop-canvas-point)

(defvar *root-exposure-hook* '())

(add-hook *root-exposure-hook*
          (lambda (window &optional x y width height count)
            (e454-swm/redraw-desktop-canvas-points
             (find-screen window) *e454-swm/desktop-canvas-points*)))

;; It's necessary to redefine how Stump handles exposure events in order to add the new hook
(define-stump-event-handler :exposure (window x y width height count)
  (let (screen ml)
    (when (zerop count)
      (cond
        ((setf screen (find-screen window))
         ;; root exposed
         (group-root-exposure (screen-current-group screen))
         (run-hook-with-args *root-exposure-hook* window x y width height count))
        ((setf screen (find-message-window-screen window))
         ;; message window exposed
         (if (plusp (screen-ignore-msg-expose screen))
             (decf (screen-ignore-msg-expose screen))
             (redraw-current-message screen)))
        ((setf ml (find-mode-line-by-window window))
         (setf screen (mode-line-screen ml))
         (redraw-mode-line ml t)))
      ;; Show the area.
      (when (and *debug-expose-events* screen)
        (draw-cross screen window x y width height)))))

;; tried to do a remote thing? This should be run inside of Emacs.
;;(slime-connect "localhost" "4004" "utf-8-unix" (slime-interactive-eval "(stumpwm:apply-emacs-colors)"))

;; this successfully sends a command from emacs lisp to stumpwm
;;(slime-connect "localhost" "4004")
;;(slime-repl-send-string "(stumpwm:echo \"hi\")")

;; libnotify module for getting notifications
(ql:quickload "xml-emitter")
(ql:quickload "split-sequence")
(ql:quickload "cffi")
(ql:quickload "dbus")
(load-module "notify")
(notify::notify-server-toggle)


;; some external applications to start up
(run-shell-command "redshift")
(run-shell-command "compton --config /home/matthew/.comptonrc")
(run-shell-command "ssh-agent /usr/local/bin/stumpwm")
(run-shell-command "/home/matthew/.fehbg")

(run-shell-command "setxkbmap -option compose:caps")
(run-shell-command "setxkbmap -option grp:shifts_toggle")
(run-shell-command "setxkbmap us,gr")
(run-shell-command "numlockx")
